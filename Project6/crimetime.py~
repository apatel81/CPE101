#Project 6 - Crime Time
#Name: Ajay Patel
#Instructor: S. Einakian
#Section: 1


#monthlist = ['January', 'February, 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']


class Crime:
#Attributes: ID Number, Category, Day of Week, Month, Time(AM/PM)
   
   def __init__(self, ID, Category):
       self.ID = ID
       self.Category = Category
       self.Day = None
       self.Month = None
       self.Time = None

   def __repr__(self):
       return '({}, {}, {}, {}, {})'.format(self.ID, self.Category, self.Day, self.Month, self.Time)

   def __eq__(self, other):
       return (type(other) == Crime and self.ID == other.ID)

   def set_time(self, day_of_week, month, hour):
       self.day_of_week = day_of_week

       monthlist = ['January', 'February, 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
       self.month = monthlist[month - 1]

       hour = str(hour)

       if hour == '0':
          hour = '12 AM'
       elif '1' <= hour <= '11':
          hour = hour + 'AM'
       elif hour == '12':
          hour == '12 PM'
       else:
          hour = str(int(hour) -12) + 'PM'

       self.hour = hour


   def create_crime(lines):
       #Take input and format into one line
       #str(s) ---> list
       rob_idlist = []
       for line in lines:
           input = line.split('\t')
           if str(input[1]) == 'ROBBERY':
              #crime = Crime(int(input[0]), input[1])
              #if crime not in rob_idlist:
                 #rob_idlist.append(crime)    
              if input not in rob_idlist:
                 rob_idlist.append(input)
       L = [Crime(int(x[0]) for x in rob_idlist)
       return 
 
 
   def sort_crimes(crimes):
       #selection sort
       #list -> list
       for i in range(len(crimes)):
           minIndex = i
           for k in range(i + 1, len(crimes)):
               if crimes[k].id < crimes[minIndex].id:
                  minIndex = k   

           swap(crimes, minIndex, i )
       return crimes
   
  
   def swap(A, x, y):
       #swap the value
       #list  int int ->   
       tmp = A[x]
       A[x] = A[y]
       A[y] = tmp


   def update_crimes(crimes, lines):
       pass




   def find_crime(crimes, crime_id):

       #Binary Serach on sorted list
       #list -> bool
       def binarySearch(alist, item):
           first = 0
           last = len(alist)-1
           found = False
           while first<=last and not found:
                 midpoint = (first + last)//2
                 if alist[midpoint] == item:
                    found = True
                 else:
                    if item < alist[midpoint]:
                       last = midpoint-1
                    else:
                       first = midpoint+1
           return found

       L=[4,8,-9,4,34,1,0,37]
       print('L=',L)
       print('Sorted L:', selectionsort(L))
       print('find: ',binarySearch(L,34))
       print('find: ',binarySearch(L,-34))







